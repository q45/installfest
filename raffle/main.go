package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"os"
	"text/template"
	"time"
)

var url = "https://api.meetup.com/members"

type AutoGenerated struct {
	Created  int64  `json:"created"`
	Updated  int64  `json:"updated"`
	Response string `json:"response"`
	Guests   int    `json:"guests"`
	Event    struct {
		ID           string `json:"id"`
		Name         string `json:"name"`
		YesRsvpCount int    `json:"yes_rsvp_count"`
		Time         int64  `json:"time"`
		UtcOffset    int    `json:"utc_offset"`
	} `json:"event"`
	Group struct {
		ID                int    `json:"id"`
		Urlname           string `json:"urlname"`
		Name              string `json:"name"`
		Status            string `json:"status"`
		Who               string `json:"who"`
		Members           int    `json:"members"`
		JoinMode          string `json:"join_mode"`
		LocalizedLocation string `json:"localized_location"`
		GroupPhoto        struct {
			ID          int    `json:"id"`
			HighresLink string `json:"highres_link"`
			PhotoLink   string `json:"photo_link"`
			ThumbLink   string `json:"thumb_link"`
			Type        string `json:"type"`
			BaseURL     string `json:"base_url"`
		} `json:"group_photo"`
	} `json:"group"`
	Member struct {
		ID           int    `json:"id"`
		Name         string `json:"name"`
		EventContext struct {
			Host bool `json:"host"`
		} `json:"event_context"`
	} `json:"member"`
	Venue struct {
		ID                   int     `json:"id"`
		Name                 string  `json:"name"`
		Lat                  float64 `json:"lat"`
		Lon                  float64 `json:"lon"`
		Repinned             bool    `json:"repinned"`
		Address1             string  `json:"address_1"`
		Address2             string  `json:"address_2"`
		City                 string  `json:"city"`
		Country              string  `json:"country"`
		LocalizedCountryName string  `json:"localized_country_name"`
		Zip                  string  `json:"zip"`
		State                string  `json:"state"`
	} `json:"venue"`
}

var rsvps []string

func main() {
	rsvps = []string{}
	apiKey := os.Getenv("MEETUP_API_KEY")
	fmt.Println("Starting the applications...")
	resp, err := http.Get("https://api.meetup.com/utahgophers/events/wztptpyzhbkb/rsvps?key=" + apiKey + "&sign=true&")
	if err != nil {
		fmt.Printf("The http request failed with the error %s\n", err)
	}

	data, _ := ioutil.ReadAll(resp.Body)

	a := []AutoGenerated{}

	err = json.Unmarshal(data, &a)

	for _, m := range a {
		rsvps = append(rsvps, m.Member.Name)
		fmt.Println(m.Member.Name)
	}

	http.Handle("/public/", http.StripPrefix("/public/", http.FileServer(http.Dir("public"))))

	http.HandleFunc("/", Raffle)
	log.Fatal(http.ListenAndServe(":3000", nil))

}

func Raffle(w http.ResponseWriter, r *http.Request) {

	tmpl := template.Must(template.ParseFiles("index.html"))
	err := tmpl.ExecuteTemplate(w, "index.html", randomWinner())
	if err != nil {
		http.Error(w, err.Error(), 500)
	}

}

func randomWinner() string {
	s := rand.NewSource(time.Now().Unix())
	r := rand.New(s)
	fmt.Println(rsvps)
	w := r.Intn(len(rsvps))

	return rsvps[w]
}
